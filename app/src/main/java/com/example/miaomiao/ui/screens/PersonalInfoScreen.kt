package com.example.miaomiao.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.miaomiao.ui.theme.*
import com.example.miaomiao.viewmodel.MainViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PersonalInfoScreen(
    viewModel: MainViewModel,
    onNavigateBack: () -> Unit
) {
    val currentUser by viewModel.currentUser.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val successMessage by viewModel.successMessage.collectAsState()
    
    var showPasswordDialog by remember { mutableStateOf(false) }
    var showAvatarDialog by remember { mutableStateOf(false) }
    var showUsernameDialog by remember { mutableStateOf(false) }
    
    // ÊòæÁ§∫Ê∂àÊÅØ
    LaunchedEffect(errorMessage) {
        if (errorMessage != null) {
            // ËøôÈáåÂèØ‰ª•ÊòæÁ§∫ Snackbar Êàñ Toast
        }
    }
    
    LaunchedEffect(successMessage) {
        if (successMessage != null) {
            // ËøôÈáåÂèØ‰ª•ÊòæÁ§∫ Snackbar Êàñ Toast
        }
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8F9FA))
            .padding(16.dp)
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = onNavigateBack) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "ËøîÂõû",
                    tint = DarkPink
                )
            }
            Text(
                text = "‰∏™‰∫∫‰ø°ÊÅØ",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                color = DarkPink,
                modifier = Modifier.weight(1f)
            )
        }
        
        // Áî®Êà∑‰ø°ÊÅØÂç°Áâá
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 24.dp),
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(containerColor = SoftPink),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(20.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Â§¥ÂÉè
                Box(
                    modifier = Modifier
                        .size(100.dp)
                        .clip(CircleShape)
                        .background(Color.White)
                        .clickable { showAvatarDialog = true },
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = currentUser?.avatar ?: "üê±",
                        fontSize = 50.sp
                    )
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = currentUser?.username ?: "ÂñµÂñµÁî®Êà∑",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.White
                )
                Text(
                    text = "ÊâãÊú∫Âè∑Ôºö${currentUser?.phone ?: "Êú™Áü•"}",
                    fontSize = 14.sp,
                    color = Color.White.copy(alpha = 0.8f)
                )
            }
        }
        
        // ÂäüËÉΩÈÄâÈ°π
        val options = listOf(
            PersonalInfoOption("‰øÆÊîπÁî®Êà∑Âêç", Icons.Default.Person, "Êõ¥ÊîπÊÇ®ÁöÑÊòæÁ§∫ÂêçÁß∞") { showUsernameDialog = true },
            PersonalInfoOption("‰øÆÊîπÂ§¥ÂÉè", Icons.Default.Face, "ÈÄâÊã©ÊÇ®ÂñúÊ¨¢ÁöÑÂ§¥ÂÉè") { showAvatarDialog = true },
            PersonalInfoOption("‰øÆÊîπÂØÜÁ†Å", Icons.Default.Lock, "Êõ¥ÊîπÁôªÂΩïÂØÜÁ†Å") { showPasswordDialog = true }
        )
        
        options.forEach { option ->
            PersonalInfoOptionCard(
                option = option,
                onClick = option.onClick
            )
            Spacer(modifier = Modifier.height(12.dp))
        }
        
        // ÊòæÁ§∫Ê∂àÊÅØ
        errorMessage?.let { message ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                colors = CardDefaults.cardColors(containerColor = Color.Red.copy(alpha = 0.1f))
            ) {
                Text(
                    text = message,
                    color = Color.Red,
                    modifier = Modifier.padding(16.dp)
                )
            }
        }
        
        successMessage?.let { message ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                colors = CardDefaults.cardColors(containerColor = Color.Green.copy(alpha = 0.1f))
            ) {
                Text(
                    text = message,
                    color = Color.Green,
                    modifier = Modifier.padding(16.dp)
                )
            }
        }
    }
    
    // ‰øÆÊîπÂØÜÁ†ÅÂØπËØùÊ°ÜË∞ÉÁî®ÈÄªËæë
    if (showPasswordDialog) {
        PasswordChangeDialog(
            onDismiss = { showPasswordDialog = false },
            onConfirm = { oldPassword, newPassword, confirmPassword ->
                // Âú®ËøôÈáåËøõË°åÂâçÁ´ØÈ™åËØÅ
                when {
                    oldPassword.isBlank() -> {
                        viewModel.setErrorMessage("ËØ∑ËæìÂÖ•ÂΩìÂâçÂØÜÁ†Å")
                    }
                    newPassword.isBlank() -> {
                        viewModel.setErrorMessage("ËØ∑ËæìÂÖ•Êñ∞ÂØÜÁ†Å")
                    }
                    confirmPassword.isBlank() -> {
                        viewModel.setErrorMessage("ËØ∑Á°ÆËÆ§Êñ∞ÂØÜÁ†Å")
                    }
                    newPassword != confirmPassword -> {
                        viewModel.setErrorMessage("‰∏§Ê¨°ËæìÂÖ•ÁöÑÊñ∞ÂØÜÁ†Å‰∏ç‰∏ÄËá¥")
                    }
                    newPassword.length < 6 -> {
                        viewModel.setErrorMessage("Êñ∞ÂØÜÁ†ÅÈïøÂ∫¶‰∏çËÉΩÂ∞ë‰∫é6‰Ωç")
                    }
                    oldPassword == newPassword -> {
                        viewModel.setErrorMessage("Êñ∞ÂØÜÁ†Å‰∏çËÉΩ‰∏éÂéüÂØÜÁ†ÅÁõ∏Âêå")
                    }
                    else -> {
                        // ÊâÄÊúâÈ™åËØÅÈÄöËøáÔºåË∞ÉÁî®ViewModelÊõ¥Êñ∞ÂØÜÁ†Å
                        viewModel.updateUserPassword(oldPassword, newPassword)
                        showPasswordDialog = false
                    }
                }
            }
        )
    }
    
    // ‰øÆÊîπÂ§¥ÂÉèÂØπËØùÊ°Ü
    if (showAvatarDialog) {
        AvatarSelectionDialog(
            currentAvatar = currentUser?.avatar ?: "üê±",
            onDismiss = { showAvatarDialog = false },
            onConfirm = { newAvatar ->
                viewModel.updateUserAvatar(newAvatar)
                showAvatarDialog = false
            }
        )
    }
    
    // ‰øÆÊîπÁî®Êà∑ÂêçÂØπËØùÊ°Ü
    if (showUsernameDialog) {
        UsernameChangeDialog(
            currentUsername = currentUser?.username ?: "ÂñµÂñµÁî®Êà∑",
            onDismiss = { showUsernameDialog = false },
            onConfirm = { newUsername ->
                viewModel.updateUserInfo(newUsername, currentUser?.avatar ?: "üê±")
                showUsernameDialog = false
            }
        )
    }
}

data class PersonalInfoOption(
    val title: String,
    val icon: androidx.compose.ui.graphics.vector.ImageVector,
    val description: String,
    val onClick: () -> Unit
)

@Composable
fun PersonalInfoOptionCard(
    option: PersonalInfoOption,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() },
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                imageVector = option.icon,
                contentDescription = option.title,
                tint = MediumPink,
                modifier = Modifier.size(24.dp)
            )
            
            Spacer(modifier = Modifier.width(16.dp))
            
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = option.title,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    color = DarkPink
                )
                Text(
                    text = option.description,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
            }
            
            Icon(
                imageVector = Icons.Default.ChevronRight,
                contentDescription = null,
                tint = Color.Gray,
                modifier = Modifier.size(20.dp)
            )
        }
    }
}

@Composable
fun PasswordChangeDialog(
    onDismiss: () -> Unit,
    onConfirm: (String, String, String) -> Unit // ‰øÆÊîπÂèÇÊï∞ÔºåÂ¢ûÂä†Á°ÆËÆ§ÂØÜÁ†Å
) {
    var oldPassword by remember { mutableStateOf("") }
    var newPassword by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var passwordVisible by remember { mutableStateOf(false) }
    
    // ÂÆûÊó∂È™åËØÅÁä∂ÊÄÅ
    val isPasswordMatch = newPassword == confirmPassword
    val isFormValid = oldPassword.isNotBlank() && 
                     newPassword.isNotBlank() && 
                     confirmPassword.isNotBlank() && 
                     isPasswordMatch &&
                     newPassword.length >= 6 &&
                     oldPassword != newPassword
    
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text("‰øÆÊîπÂØÜÁ†Å", fontWeight = FontWeight.Bold)
        },
        text = {
            Column {
                OutlinedTextField(
                    value = oldPassword,
                    onValueChange = { oldPassword = it },
                    label = { Text("ÂΩìÂâçÂØÜÁ†Å") },
                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                OutlinedTextField(
                    value = newPassword,
                    onValueChange = { newPassword = it },
                    label = { Text("Êñ∞ÂØÜÁ†Å") },
                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    supportingText = {
                        if (newPassword.isNotBlank() && newPassword.length < 6) {
                            Text(
                                text = "ÂØÜÁ†ÅÈïøÂ∫¶‰∏çËÉΩÂ∞ë‰∫é6‰Ωç",
                                color = MaterialTheme.colorScheme.error,
                                fontSize = 12.sp
                            )
                        }
                    }
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                OutlinedTextField(
                    value = confirmPassword,
                    onValueChange = { confirmPassword = it },
                    label = { Text("Á°ÆËÆ§Êñ∞ÂØÜÁ†Å") },
                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    supportingText = {
                        if (confirmPassword.isNotBlank() && !isPasswordMatch) {
                            Text(
                                text = "‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥",
                                color = MaterialTheme.colorScheme.error,
                                fontSize = 12.sp
                            )
                        }
                    }
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Checkbox(
                        checked = passwordVisible,
                        onCheckedChange = { passwordVisible = it }
                    )
                    Text("ÊòæÁ§∫ÂØÜÁ†Å", fontSize = 14.sp)
                }
                
                // È¢ùÂ§ñÁöÑÈ™åËØÅÊèêÁ§∫
                if (oldPassword.isNotBlank() && newPassword.isNotBlank() && oldPassword == newPassword) {
                    Text(
                        text = "Êñ∞ÂØÜÁ†Å‰∏çËÉΩ‰∏éÂéüÂØÜÁ†ÅÁõ∏Âêå",
                        color = MaterialTheme.colorScheme.error,
                        fontSize = 12.sp,
                        modifier = Modifier.padding(top = 4.dp)
                    )
                }
            }
        },
        confirmButton = {
            TextButton(
                onClick = {
                    onConfirm(oldPassword, newPassword, confirmPassword)
                },
                enabled = isFormValid
            ) {
                Text("Á°ÆËÆ§")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("ÂèñÊ∂à")
            }
        }
    )
}

@Composable
fun AvatarSelectionDialog(
    currentAvatar: String,
    onDismiss: () -> Unit,
    onConfirm: (String) -> Unit
) {
    var selectedAvatar by remember { mutableStateOf(currentAvatar) }
    
    val avatarOptions = listOf(
        "üê±", "üê∂", "üê∞", "üêª", "üêº", "ü¶ä", "üê∏", "üê∑",
        "üêµ", "üêØ", "ü¶Å", "üê®", "üêπ", "üê≠", "üê∫", "ü¶ù"
    )
    
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text("ÈÄâÊã©Â§¥ÂÉè", fontWeight = FontWeight.Bold)
        },
        text = {
            LazyRow(
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(avatarOptions.chunked(4)) { row ->
                    Column {
                        row.forEach { avatar ->
                            Box(
                                modifier = Modifier
                                    .size(60.dp)
                                    .clip(CircleShape)
                                    .background(
                                        if (avatar == selectedAvatar) SoftPink else Color.Gray.copy(alpha = 0.1f)
                                    )
                                    .clickable { selectedAvatar = avatar },
                                contentAlignment = Alignment.Center
                            ) {
                                Text(
                                    text = avatar,
                                    fontSize = 30.sp
                                )
                            }
                            Spacer(modifier = Modifier.height(8.dp))
                        }
                    }
                }
            }
        },
        confirmButton = {
            TextButton(
                onClick = { onConfirm(selectedAvatar) }
            ) {
                Text("Á°ÆËÆ§")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("ÂèñÊ∂à")
            }
        }
    )
}

@Composable
fun UsernameChangeDialog(
    currentUsername: String,
    onDismiss: () -> Unit,
    onConfirm: (String) -> Unit
) {
    var newUsername by remember { mutableStateOf(currentUsername) }
    
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text("‰øÆÊîπÁî®Êà∑Âêç", fontWeight = FontWeight.Bold)
        },
        text = {
            OutlinedTextField(
                value = newUsername,
                onValueChange = { newUsername = it },
                label = { Text("Áî®Êà∑Âêç") },
                modifier = Modifier.fillMaxWidth()
            )
        },
        confirmButton = {
            TextButton(
                onClick = { onConfirm(newUsername) },
                enabled = newUsername.isNotBlank() && newUsername != currentUsername
            ) {
                Text("Á°ÆËÆ§")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("ÂèñÊ∂à")
            }
        }
    )
}